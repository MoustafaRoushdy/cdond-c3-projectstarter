
version: 2.1

commands:

  troubleshoot_env_vars:
    steps:
      - run:
          name: print env variables
          command: |
            if [ "postgres" == "$TYPEORM_CONNECTION" ]
            then
                echo "Correct" 
            else
                echo "Wrong" 
            fi
            if [ "5432" == "$TYPEORM_PORT" ]
            then
                echo "Correct" 
            else
                echo "Wrong" 
            fi
            if [ "postgres" == "$TYPEORM_USERNAME" ]
            then
                echo "Correct" 
            else
                echo "Wrong" 
            fi
            if [ "glee" == "$TYPEORM_DATABASE" ]
            then
                echo "Correct" 
            else
                echo "Wrong" 
            fi
            if [ "./src/migrations/*.ts" == "$TYPEORM_MIGRATIONS" ]
            then
                echo "Correct" 
            else
                echo "Wrong" 
            fi
            if [ "./src/migrations" == "$TYPEORM_MIGRATIONS_DIR" ]
            then
                echo "Correct" 
            else
                echo "Wrong" 
            fi
            if [ "./src/modules/**/*.entity.ts" == "$TYPEORM_ENTITIES" ]
            then
                echo "Correct" 
            else
                echo "Wrong" 
            fi
            echo $TYPEORM_CONNECTION >> env.txt 
            x=$TYPEORM_CONNECTION 
            echo $x
            echo $TYPEORM_MIGRATIONS_DIR >> env.txt
            echo $TYPEORM_ENTITIES >> env.txt
            echo $TYPEORM_MIGRATIONS >> env.txt
            echo $TYPEORM_HOST >> env.txt
            echo $TYPEORM_PORT >> env.txt
            echo $TYPEORM_USERNAME >> env.txt
            echo $TYPEORM_PASSWORD >> env.txt
            echo $TYPEORM_DATABASE >> env.txt
            cat env.txt
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
  install_nodejs:
      description: Install Node.js 13.8.0
      steps:
        - run:
            name: Install Node.js 13.8.0
            command: |
              # Install Node.js LTS version as our base Node.js version
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt install -y nodejs

              # Use n version manager to use Node.js v13.8.0
              sudo npm install --global n
              sudo n 13.8.0

  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
jobs:
  trouble-shoot:
    docker:
      - image: cimg/python:3.10 
    steps:
      - checkout
      - troubleshoot_env_vars
      - install_nodejs
      - run:
          name: Revert migrations
          command: |
              cd ~/project/backend
              npm install
              npm run migrations:revert
      
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: [ 'frontend-build-{{ checksum "frontend/package-lock.json" }}' ]
    - run:
        name: Build front-end
        command: |
          cd frontend
          npm install
          npm run build
    - save_cache:
        paths: [frontend/node_modules]
        key: 'frontend-build-{{ checksum "frontend/package-lock.json" }}'
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ['backend-build-{{ checksum "backend/package-lock.json" }}']
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install 
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: 'backend-build-{{ checksum "backend/package-lock.json" }}'
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: ['frontend-build-{{ checksum "frontend/package-lock.json" }}']
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install 
            npm run test
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: ['backend-build-{{ checksum "backend/package-lock.json" }}']
      - run:
          name: test-backend
          command: |
            cd backend
            npm install 
            npm run test
  
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: ['frontend-build-{{ checksum "frontend/package-lock.json" }}']
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #    keys: ['backend-build-{{ checksum "backend/package-lock.json" }}']
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10   
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10  
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["d9:5f:e2:f9:ae:f3:a7:f6:89:3d:cc:af:0b:af:d3:ed"] 
      - attach_workspace:
          at: ~/
      - install_awscli
      - install_ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/python:3.10 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: ['backend-build-{{ checksum "backend/package-lock.json" }}']
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to KVDB_BUCKET
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                echo "saving to kvdb"
                curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
                echo "No migrations are pending" 
            fi
      - destroy-environment
      - revert-migrations
  
  deploy-frontend:
    docker:
      - image: cimg/python:3.10 
    steps:
      - checkout
      - install_nodejs
      - install_awscli 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      
  deploy-backend:
    docker:
      - image: cimg/python:3.10 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d9:5f:e2:f9:ae:f3:a7:f6:89:3d:cc:af:0b:af:d3:ed"] 
      - attach_workspace:
          at: ~/
      - install_ansible
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: ['backend-build-{{ checksum "backend/package-lock.json" }}']
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf .circleci/ansible/roles/deploy/files/artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      - image: cimg/python:3.10 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 1
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                exit 0
              else
                exit 1
              fi
        
      - destroy-environment
      - revert-migrations

  cloudfront-update:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id and save it in kvdb
            command: |
              export OldWorkflowID=$(aws cloudformation  \
                list-exports --query \
                "Exports[?Name==\`WorkflowID\`].Value"  --output text) 
              echo ${OldWorkflowID}
              curl https://kvdb.io/${KVDB_BUCKET}/OldWorkflowId -d ${OldWorkflowID}
        - run:
            name: Update cloudfront distribution
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
        - destroy-environment
        - revert-migrations      
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: get old stacke id and Remove old stacks and files
          command: |
            # Empty frontend bucket
            export OldWorkflowId=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/OldWorkflowId)
            echo ${OldWorkflowId}
            aws s3 rm s3://udapeople-${OldWorkflowId:10:18} --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowId:10:18}

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowId:10:18}


workflows:
  default:
    jobs:
      #- trouble-shoot
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend , deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]


      
          

